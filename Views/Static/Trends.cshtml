@{
    ViewData["sidebar"] = true;
    ViewData["Title"] = "Import/Export Trends";
}

@using PortManager.Models;

<div class="container">
    <h3 class="h3">Imports</h3>
    <canvas id="imports"></canvas>

    <h3 class="h3">Exports</h3>
    <canvas id="exports"></canvas>

    <h3 class="h3">Top Imports/Exports</h3>
    <canvas id="top_imports_exports"></canvas>
</div>

@{
    List<string> import_data = CustomDuty.ChartData();
    string[] import_dates = import_data.Where((x, i) => i % 2 == 1).ToArray();
    string[] import_duties = import_data.Where((x, i) => i % 2 == 0).ToArray();

    List<string> export_data = CustomDuty.ChartData(1);
    string[] export_dates = export_data.Where((x, i) => i % 2 == 1).ToArray();
    string[] export_duties = export_data.Where((x, i) => i % 2 == 0).ToArray();

    string[] item_categories = Item.CategoryMap;
    int[] export_counts = Item.CategoryCount(1);
    int[] import_counts = Item.CategoryCount();
}

<script src="https://cdn.jsdelivr.net/npm/chart.js@3.2.1/dist/chart.min.js"></script>
<script>
    const BG_COLORS = [
        'rgba(255, 99, 132, 0.2)',
        'rgba(54, 162, 235, 0.2)',
        'rgba(255, 206, 86, 0.2)',
        'rgba(75, 192, 192, 0.2)',
        'rgba(153, 102, 255, 0.2)',
        'rgba(255, 159, 64, 0.2)'
    ];
    const BORDER_COLORS = [
        'rgba(255, 99, 132, 1)',
        'rgba(54, 162, 235, 1)',
        'rgba(255, 206, 86, 1)',
        'rgba(75, 192, 192, 1)',
        'rgba(153, 102, 255, 1)',
        'rgba(255, 159, 64, 1)'
    ];

    const i_ctx = document.getElementById('imports').getContext('2d');
    const importsChart = new Chart(i_ctx, {
        type: 'bar',
        data: {
            labels: [@Html.Raw("'" + string.Join("', '", import_dates) + "'")],
            datasets: [{
                label: 'Duties Paid (PKR)',
                data: [@string.Join(",", import_duties)],
                backgroundColor: BG_COLORS,
                borderColor: BORDER_COLORS,
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    // exports
    const e_ctx = document.getElementById('exports').getContext('2d');
    const exportsChart = new Chart(e_ctx, {
        type: 'bar',
        data: {
            labels: [@Html.Raw("'" + string.Join("', '", export_dates) + "'")],
            datasets: [{
                label: 'Duties Paid (PKR)',
                data: [@string.Join(",", export_duties)],
                backgroundColor: BG_COLORS,
                borderColor: BORDER_COLORS,
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    // top imports and exports
    const top_ctx = document.getElementById('top_imports_exports').getContext('2d');
    const topChart = new Chart(top_ctx, {
        type: 'bar',
        data: {
            labels: [@Html.Raw("'" + string.Join("', '", item_categories) + "'")],
            datasets: [
                {
                    label: 'Imports',
                    data: [ @string.Join(",", import_counts) ],
                    backgroundColor: BG_COLORS,
                    borderColor: BORDER_COLORS,
                    borderWidth: 1
                },
                {
                    label: 'Exports',
                    data: [ @string.Join(",", export_counts) ],
                    backgroundColor: BG_COLORS.slice().reverse(),
                    borderColor: BORDER_COLORS,
                    borderWidth: 1
                }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
</script>